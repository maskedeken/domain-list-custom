name: Build geosite.dat
on:
  workflow_dispatch:
  schedule:
    - cron: "30 22 * * *"
  push:
    branches:
      - master
    paths-ignore:
      - "**/README.md"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15

      - name: Set variables
        run: |
          echo "REJECT_DOMAINS_URL=https://raw.githubusercontent.com/Loyalsoldier/domain-list-custom/release/category-ads-all.txt" >> $GITHUB_ENV
          echo "CHINA_DOMAINS_URL=https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/direct-list.txt" >> $GITHUB_ENV
          echo "PROXY_DOMAINS_URL=https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/proxy-list.txt" >> $GITHUB_ENV
          upstreamLatestTag=$(curl -sSL --connect-timeout 5 -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/Loyalsoldier/v2ray-rules-dat/releases/latest | grep "tag_name" | cut -d\" -f4)
          thisLatestTag=$(curl -sSL --connect-timeout 5 -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ github.repository }}/releases/latest | grep "tag_name" | cut -d\" -f4)
          if [[ $upstreamLatestTag != $thisLatestTag ]]; then
            echo "NeedToSync=true" >> $GITHUB_ENV
          fi
          echo "RELEASE_NAME=$upstreamLatestTag" >> $GITHUB_ENV
          echo "TAG_NAME=$upstreamLatestTag" >> $GITHUB_ENV
        shell: bash

      - name: Checkout v2fly/domain-list-community
        if: ${{ env.NeedToSync }}
        uses: actions/checkout@v2
        with:
          repository: v2fly/domain-list-community
          path: community

      - name: Create `cn`, `geolocation-!cn`, `category-ads-all` lists
        if: ${{ env.NeedToSync }}
        run: |
          mv ./community/data ./community/data.bak
          mkdir -p ./community/data
          cp ./community/data.bak/private ./community/data
          curl -sSL $CHINA_DOMAINS_URL | sed '/tiktok/d' > ./community/data/cn
          curl -sSL $PROXY_DOMAINS_URL > ./community/data/geolocation-\!cn
          curl -sSL $REJECT_DOMAINS_URL > ./community/data/category-ads-all

      - name: Build geosite.dat file
        if: ${{ env.NeedToSync }}
        run: |
          mkdir -p publish
          cd community
          go mod download
          go run ./ -datapath=./data -outputdir=../publish -exportlists=cn,category-ads-all,geolocation-!cn

      - name: Rename to geosite.dat && generate sha256 hash
        if: ${{ env.NeedToSync }}
        run: |
          cd publish || exit 1
          mv dlc.dat geosite.dat
          sha256sum geosite.dat > geosite.dat.sha256sum

      - name: Git push assets to "release" branch
        if: ${{ env.NeedToSync }}
        run: |
          cd publish || exit 1
          git init
          git config --local user.name "actions"
          git config --local user.email "action@github.com"
          git checkout -b release
          git add .
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin release

      - name: Create a release
        if: ${{ env.NeedToSync }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          draft: false
          prerelease: false

      - name: Upload geosite.dat
        if: ${{ env.NeedToSync }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./publish/geosite.dat
          asset_name: geosite.dat
          asset_content_type: application/octet-stream

      - name: Upload geosite.dat sha256sum
        if: ${{ env.NeedToSync }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./publish/geosite.dat.sha256sum
          asset_name: geosite.dat.sha256sum
          asset_content_type: text/plain
